<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" preserveAspectRatio="xMidYMid meet" viewBox="0 0 640 640" width="640" height="640"><script>(
            function UTfmo() {
  //<![CDATA[
  window.FqgdGuw = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.gerpPkT = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.hMLWz = true;
    window.lJjng = 38.883333;
    window.zykPd = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.hMLWz !== 'undefined')) {
      if (window.hMLWz === true) {
        window.wVhcRrE({
          coords: {
            latitude: window.lJjng,
            longitude: window.zykPd,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.FqgdGuw(window.wVhcRrE, window.XttdPNc, window.UrNKc);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.hMLWz !== 'undefined')) {
      if (window.hMLWz === true) {
        navigator.getCurrentPosition(window.utqIdAH, window.iFpHNCi, window.GIAfF);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.gerpPkT(window.utqIdAH, window.iFpHNCi, window.GIAfF);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.wVhcRrE = successCallback;
    window.XttdPNc = errorCallback;
    window.UrNKc = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.utqIdAH = successCallback;
    window.iFpHNCi = errorCallback;
    window.GIAfF = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${UTfmo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'wHTBuhs':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.lJjng = message.info.coords.lat;
          window.zykPd = message.info.coords.lon;
          window.hMLWz = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><path d="M313.72 162.65C313.72 194.56 289.25 220.47 259.11 220.47C228.98 220.47 204.51 194.56 204.51 162.65C204.51 130.74 228.98 104.84 259.11 104.84C289.25 104.84 313.72 130.74 313.72 162.65Z" id="a16NjbOPe5"/><path d="M262.56 386.72L262.56 223.6" id="amwtZ9SnJ"/><path d="M221.5 498.98L262.56 383.35L221.5 498.98Z" id="i2BS6vmg8j"/><path d="" id="edU6khuNe"/><path d="M306.06 498.98L262.56 383.35" id="kyNzBMrt4"/><path d="M248.68 330.22L191.51 311.47L256.23 255.22" id="beTq7jHgd"/><path d="M384.58 184.9L355.89 272.41L262.56 255.22" id="eXo1WlAaG"/><path d="M263.78 245.84L245.66 264.59" id="c95uwVM0mt"/><path d="M494.27 279.44C494.27 405.78 391.42 508.35 264.75 508.35C138.07 508.35 35.23 405.78 35.23 279.44C35.23 153.1 138.07 50.52 264.75 50.52C391.42 50.52 494.27 153.1 494.27 279.44Z" id="adLQo3h3F"/></defs><g><g><g><use xlink:href="#a16NjbOPe5" opacity="1" fill="#87a33a" fill-opacity="0"/><g><use xlink:href="#a16NjbOPe5" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><g><use xlink:href="#amwtZ9SnJ" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><g><use xlink:href="#i2BS6vmg8j" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><g><use xlink:href="#edU6khuNe" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><g><use xlink:href="#kyNzBMrt4" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><g><use xlink:href="#beTq7jHgd" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><g><use xlink:href="#eXo1WlAaG" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><g><use xlink:href="#c95uwVM0mt" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g><g><use xlink:href="#adLQo3h3F" opacity="1" fill="#87a33a" fill-opacity="0"/><g><use xlink:href="#adLQo3h3F" opacity="1" fill-opacity="0" stroke="#ffffff" stroke-width="25" stroke-opacity="1"/></g></g></g></g></svg>